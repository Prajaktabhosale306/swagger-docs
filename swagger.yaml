openapi: 3.0.0
info:
  title: "Sample API"
  description: "This is a sample API for demonstration purposes to showcase Swagger documentation"
  version: "1.0.0"
servers:
  - url: "https://api.example.com/v1"
    description: "Main production server"
paths:
  /users/{id}:
    get:
      summary: "Retrieve a user by ID"
      description: "This endpoint fetches a user from the database using the provided user ID."
      operationId: getUserById
      tags:
        - "User Operations"
      parameters:
        - name: id
          in: path
          description: "The unique ID of the user"
          required: true
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: "Successfully retrieved user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: "User ID"
                    example: 123
                  name:
                    type: string
                    description: "User's full name"
                    example: "John Doe"
                  email:
                    type: string
                    description: "User's email address"
                    example: "johndoe@example.com"
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object  # Corrected to be 'object' here
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred."
                  code:
                    type: integer
                    example: 500
      security:
        - api_key: []
      deprecated: false
      externalDocs:
        description: "More about users"
        url: "https://docs.example.com/users"
  /users:
    post:
      summary: "Create a new user"
      description: "This endpoint allows you to create a new user in the system."
      operationId: createUser
      tags:
        - "User Operations"
      requestBody:
        description: "User object that needs to be created"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "User's full name"
                  example: "Jane Doe"
                email:
                  type: string
                  description: "User's email address"
                  example: "janedoe@example.com"
      responses:
        '201':
          description: "User successfully created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: "The unique ID of the new user"
                    example: 124
                  name:
                    type: string
                    description: "The name of the new user"
                    example: "Jane Doe"
                  email:
                    type: string
                    description: "The email of the new user"
                    example: "janedoe@example.com"
        '400':
          description: "Invalid input data"
        '500':
          description: "Internal server error"
      security:
        - api_key: []
      deprecated: false
  /login:
    post:
      summary: "Login with credentials"
      description: "Authenticates a user using their email and password."
      operationId: loginUser
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            example: "johndoe@example.com"
        - name: password
          in: query
          required: true
          schema:
            type: string
            example: "password123"
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "JWT authentication token"
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: "Unauthorized, incorrect credentials"
        '500':
          description: "Internal server error"
      security: []
      deprecated: true
components:
  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
  examples:
    userExample:
      value:
        id: 1
        name: "John Doe"
        email: "johndoe@example.com"
  responses:
    NotFound:
      description: "Resource not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource not found"
